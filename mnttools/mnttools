#!/bin/bash
: <<COMMENT
  Copyright (C) 2012 Tri Le <trile7 at gmail dot com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
COMMENT

version="mnttools v0.3.4"
blue='\e[0;34m'; green='\e[0;32m'; red='\e[0;31m'; yellow='\e[0;33m'; bold='\e[1m';none='\e[0m'
function menu {
  n=0
  choices=("$@")
  echo -e "$blue$bold$menutitle"
  for i in "${choices[@]}"; do
    echo -e "$none$((n++)))   $yellow$i"
  done
  echo -en "${none}c|q) ${yellow}Cancel"
  echo -e $green
  read -p "Enter a choice from above menu: " i
  echo -e $none
  [[ $i =~ c|q ]] && exit 1
  if test $i -lt $n 2>/dev/null; then
    choice=${choices[i]}; return $i
  else
    echo -e "$red$i is an invalid entry...please try again!"
    menu "${choices[@]}"
  fi
  }

function yadtray() {
  y=`which yad 2>/dev/null` || y=/usr/bin/yad
  [[ -f $y && $DISPLAY ]] || return 1
  pipe="/tmp/${0##*/}.pipe"
  [[ -e $pipe ]] || (mkfifo $pipe && chmod 666 $pipe)
  exec 3<> $pipe
  for i in "$mntroot"/*; do
    mount | grep -q "$i" && mntpoints=(${mntpoint[@]} "$i")
  done
  if [[ ! $mntpoints ]]; then
    echo quit >&3
    return
  fi
  pgrep -u ${USER:=$u} -f Mounted.*notification &>/dev/null || $y --text="Mounted Media" --image=gtk-harddisk --notification --command="$0 tray" --listen <&3 &
  pkill -f ${0##*/}.*mountpoints
  mntpoint=`$y --center --title ${0##*/} --window-icon=gtk-harddisk --timeout=10 --height=200 --button gtk-open:0 --button gtk-disconnect:2 --list --column mountpoints ${mntpoints[@]}`
  case $? in
    0) $open_cmd "${mntpoint%|}" ;;
    2) unmount "${mntpoint%|}" | $y --on-top --center --no-buttons --skip-taskbar --undecorated --fixed --progress --pulsate --auto-close --progress-text "Unmounting ${mntpoint%|}...please wait..."
    [[ -e ${mntpoint%|} ]] && $y --center --title ${0##*/} --window-icon=gtk-harddisk --button gtk-ok:0 --image gtk-stop --text "<b>${mntpoint%|}</b> is busy...DO NOT remove" || $y --center --title ${0##*/} --window-icon=gtk-harddisk --button gtk-ok:0 --image gtk-apply --text "<b>${mntpoint%|}</b> is unmounted" ;;
  esac
  }

function udevmount() {
  mntopts="-o $general_mntopts"
  [[ $DEVNAME ]] || return 1
  mount | grep -q $DEVNAME && return 1
  label=${ID_FS_LABEL:=$ID_VENDOR}
  [[ $label ]] || label=${DEVNAME##*/}
  mntpoint=$mntroot/${label//[\\ ]/_}
  [[ $ID_FS_TYPE =~ vfat|ntfs ]] && mntopts="$mntopts,$winfs_mntopts"
  [[ $ID_FS_TYPE = ntfs ]] && fs="-t ntfs-3g" || fs="-t $ID_FS_TYPE"
  _mount
  }

function udevunmount() {
  [[ $DEVNAME ]] || return 1
  i=(`mount | grep -w $DEVNAME`)
  unmount "${i[2]}"
  }

function devicemenu {
  mntopts="-o $general_mntopts"
  IFS=$'\n'
  [[ `blkid` = "" ]] && sudo blkid
  d=(`blkid -o list | grep "not mounted"`)
  if [[ $d ]]; then
    menutitle="---Device Menu---"
    menu ${d[@]} "Main Menu"
    IFS=$oIFS
    if [[ $choice = "Main Menu" ]]; then mainmenu; return; fi
    i=($choice)
    DEVNAME=${i[0]}
    [[ ${i[1]} = ntfs ]] && fs="-t ntfs-3g" || fs="-t ${i[1]}"
    [[ $fs =~ vfat|ntfs ]] && mntopts="$mntopts,$winfs_mntopts"
    label=${i[2]:=${DEVNAME##*/}}
    mntpoint=$mntroot/$label
    _mount
  else
    IFS=$oIFS
    echo -e "${red}Cannot find any not mounted device $none"
    mainmenu
  fi
  }

function imagemenu {
  mntopts="-o $general_mntopts,loop"
  if [[ $# -eq 0 ]]; then
    echo -ne $green
    read -p "Enter image path: " image
    if [[ ! -f $image ]]; then
      echo -e "${red}Cannot locate $image $none"
      mainmenu
      return
    fi
  else
    image=("$@")
  fi
  for DEVNAME in "${image[@]}"; do
    mntpoint=$mntroot/${DEVNAME##*/}
    _mount
  done
  }

function sshmenu() {
  mntopts="-o $sshfs_mntopts"
  echo -e "Enter ${green}main menu$none any time (except password field) to return to menu"
  echo -e $green
  read -p "Enter server name/ip: " server
  if [[ $server = "main menu" ]]; then server=; mainmenu; return; fi
  read -p "Enter start directory: " folder
  if [[ $folder = "main menu" ]]; then server=; mainmenu; return; fi
  read -p "Enter port (default 22): " port
  if [[ $port = "main menu" ]]; then server=; mainmenu; return; fi
  [[ $port ]] && mntopts=$mntopts,port=$port
  read -p "Enter username: " user
  if [[ $user = "main menu" ]]; then server=; mainmenu; return; fi
  [[ $user ]] && server=$user@$server
  mntpoint=$mntroot/$server
  DEVNAME=$server:$folder
  fs="-t sshfs"
  echo -e $none
  _mount
  }

function ftpmenu() {
  mntopts="-o $ftpfs_mntopts"
  echo -e "Enter ${green}main menu$none any time (except password field) to return to menu"
  echo -e $green
  read -p "Enter server name/ip: " server
  if [[ $server = "main menu" ]]; then server=; mainmenu; return; fi
  read -p "Enter port (default 21): " port
  if [[ $port = "main menu" ]]; then server=; mainmenu; return; fi
  [[ $port ]] && mntopts=$mntopts,ftp_port=$port
  read -p "Enter username: " user
  if [[ $user = "main menu" ]]; then server=; mainmenu; return; fi
  if [[ $user ]]; then
    read -p "Enter password: " pass
    [[ $pass ]] && mntopts=$mntopts,user=$user:$pass || mntopts=$mntopts,user=$user
    mntpoint=$mntroot/$user@$server
  else
    mntpoint=$mntroot/$server
  fi
  DEVNAME=$server
  fs="-t ftpfs"
  echo -e $none
  _mount
  }

function smbmenu {
  menutitle="---Samba Network---"
  menu "Browse network" "Manually enter computer name/ip and port" "Main menu"
  case $choice in
    Browse*) smbbrowse ;;
    Manual*) smbbrowse manualentry ;;
    Main*) mainmenu ;;
  esac
  }

function smbbrowse {
  mntopts="-o $cifs_mntopts"
  echo -ne $green
  read -p "username: " user
  if [[ $user ]]; then
    read -p "password: " pass
    auth="-U $user%$pass"
    mntopts="$mntopts,uid=$user,user=$user"
    [[ $pass ]] && mntopts=$mntopts,password=$pass
  else
    auth="-N"
  fi
  IFS=$'\n'
  if [[ $1 = manualentry ]]; then
    read -p "Enter server name/ip: " server
    read -p "Enter port (default 445/139): " port
    [[ $port ]] && mntopts=$mntopts,port=$port
  else
    servers=$(eval smbtree $auth -S | grep '\\' | tr -d '\t\\')
    menutitle="---Samba Servers---"
    menu ${servers[@]} "Main Menu"
    if [[ $choice = "Samba Menu" ]]; then smbmenu; return; fi
    server=${choice%% *}
  fi
  shares=(`eval smbclient $auth -gL $server 2>/dev/null | grep Disk`)
  if [[ $shares ]]; then
    menutitle="---Samba Shares on $server---"
    menu ${shares[@]} "Samba Menu"
    if [[ $choice = "Samba Menu" ]]; then smbmenu; return; fi
    share=${choice#Disk|}
    DEVNAME=//$server/${share%|*}
    mntpoint=$mntroot/$server-${share%|*}
    fs="-t cifs"
  else
    echo -e "${red}Cannot detect any share on $server $none"
    smbmenu; return
  fi
  IFS=$oIFS
  _mount
  }

function histmenu {
  IFS=$'\n'
  recent=(`cat "$history_file" 2>/dev/null`)
  menutitle="---Mount History---"
  menu ${recent[@]} "Edit history" "Main Menu"
  IFS=$oIFS
  case $choice in
    Main*) mainmenu ;;
    Edit*)
      if [[ $EDITOR ]]; then
        $EDITOR "$history_file"
      else
        echo "${red}EDITOR is not defined.$none  Below is the file path:"
        echo "$history_file"
      fi
      histmenu ;;
    *)
      fs=; mntopts=; DEVNAME=; mntpoint=
      IFS='|'; n=0
      for i in $choice; do
        [[ $i = -t* ]] && fs=$i
        [[ $i = -o* ]] && mntopts=$i
        [[ $n -eq 0 ]] && DEVNAME=$i
        [[ $n -eq 1 ]] && mntpoint=$i
        ((n++))
      done
      IFS=$oIFS
      _mount ;;
  esac
  }

function histsave {
  if [[ $save_history = true && $fs =~ cifs|sshfs|ftpfs ]]; then
    mkdir -p "${history_file%/*}"
    grep "$DEVNAME|$mntpoint|$fs|$mntopts" "$history_file" &>/dev/null || echo "$DEVNAME|$mntpoint|$fs|$mntopts" >>"$history_file"
    chmod 600 "$history_file"
  fi
  }

function mainmenu {
  menutitle="---Main Menu---"
  menu "Mount devices on this computer" "Mount image file" "Mount Samba share" "Mount SSH" "Mount FTP" "Mount from history" "Unmount"
  case $choice in
    *devices*) devicemenu ;;
    *image*) imagemenu ;;
    *SSH) sshmenu ;;
    *Samba*) smbmenu ;;
    *FTP) ftpmenu ;;
    *history) histmenu ;;
    Unmount) unmountmenu ;;
  esac
  }

function unmountmenu {
  for i in "$mntroot"/*; do
    mount | grep -q "$i" && mntpoints=(${mntpoint[@]} "$i")
  done
  if [[ $mntpoints ]]; then
    menutitle="---Unmount---"
    menu ${mntpoints[@]} "All"
    if [[ $choice = All ]]; then
      run=no
      for i in "${mntpoints[@]}"; do unmount "$i"; done
      $0 tray
    else
      unmount "$choice"
    fi
  else
    echo -e "${red}Cannot find any mount in $mntroot $none"
    read -t 5
  fi
  mainmenu
  }

function _mount() { #require: DEVNAME mntpoint mntopts
  [[ $DEVNAME && $mntpoint ]] || return 1
  if i=`mount | grep -q "$DEVNAME"`; then
    echo -e "${red}$DEVNAME is already mounted $none"
    echo $i
    return 1
  fi
  n=1
  while [[ "$(ls -A $mntpoint/ 2>/dev/null)" ]]; do mntpoint=$mntpoint-$((n++)); done
  mkdir -p "$mntpoint" || return 1
  case $fs in
    -t*sshfs) sshfs "$DEVNAME" "$mntpoint" $mntopts; echo "mount command: sshfs $DEVNAME $mntpoint $mntopts" ;;
    -t*ftpfs) curlftpfs "$DEVNAME" "$mntpoint" $mntopts; echo "mount command: curlftpfs $DEVNAME $mntpoint $mntopts" ;;
    *) $runasroot mount $fs $mntopts "$DEVNAME" "$mntpoint"; echo "mount command: $runasroot mount $fs $mntopts $DEVNAME $mntpoint" ;;
  esac
  if [[ $? -eq 0 ]]; then
    histsave
    modconkyrc add
    echo "$DEVNAME is mounted at $mntpoint"
  else
    rmdir "$mntpoint"; return 1
  fi
  [[ $USER && $USER != root ]] && $0 tray || runasuser $0 tray
  }

function unmount {
  [[ $1 ]] && mntpoint=$1 || return 1
  echo -e "${yellow}Unmounting $mntpoint .... $none"
  if mount | grep -q "$mntpoint"; then
    fusermount -qu "$mntpoint" || $runasroot umount "$mntpoint"
    if [[ $? -ne 0 ]]; then
      echo "#fail to unmount $mntpoint"
      lsof "$mntpoint" 2>/dev/null
      return 1
    fi
  fi
  echo 100
  rmdir "$mntpoint"
  modconkyrc remove
  if [[ $run = yes ]]; then
    [[ $USER && $USER != root ]] && $0 tray || runasuser $0 tray
  fi
  }

function modconkyrc {
  for i in "${conkyrc[@]}"; do
    [[ -f $i ]] || continue
    if [[ $1 = add && $DEVNAME = /dev/* ]]; then
      echo -e "\${color slate grey}${mntpoint##*/}:\${fs_size $mntpoint} \${color orange}U:\${fs_used $mntpoint} \${color}F:\${fs_free $mntpoint}\n\$color\${fs_bar $mntpoint} \${color orange}\${diskio ${DEVNAME##*/}}" >>"$i"
    elif [[ $1 = remove ]]; then
      sed -i "/${mntpoint##*\/}/d" "$i"
    fi
  done
  }

function runasuser {
  IFS=$'\n'
  for i in `ps -C xinit -o user,cmd | grep xinit`; do
    u=${i%% *}
    d=`echo $i | grep -wo :[0-9]`
    IFS=$oIFS
    sudo -u $u -b DISPLAY=$d $@
  done
  }

function editcfg {
  if [[ ! -f $cfg ]]; then
    gid=`cat /etc/group | grep ^users: | cut -d':' -f3`
    echo "#You must have write permission to mntroot and history_file" >>"$cfg"
    echo "mntroot=/media" >>"$cfg"
    echo "save_history=true" >>"$cfg"
    echo "history_file=$HOME/.mnttools_history" >>"$cfg"
    echo "general_mntopts=noatime" >>"$cfg"
    echo "winfs_mntopts=gid=$gid,umask=002" >>"$cfg"
    echo "sshfs_mntopts=reconnect,compression=yes,workaround=rename,gid=$gid,umask=002" >>"$cfg"
    echo "ftpfs_mntopts=gid=$gid,umask=002" >>"$cfg"
    echo "cifs_mntopts=uid=gid=$gid" >>"$cfg"
  fi
  which xdg-open && xdg-open "$cfg" || echo "cfg is located at '$cfg'"
  }

oIFS=$IFS
if [[ $1 = --config ]]; then
  if [[ -f $2 ]]; then cfg=$2; shift 2; else shift; fi
fi
[[ -f ${cfg:=$HOME/.mnttools} ]] && source "$cfg"
gid=`cat /etc/group | grep ^users: | cut -d':' -f3`
[[ $USER && $USER != root ]] && runasroot=sudo
run=yes
mntroot=${mntroot:=/media}
save_history=${save_history:=true}
history_file=${history_file:=$HOME/.mnttools_history}
general_mntopts=${general_mntopts:=noatime}
winfs_mntopts=${winfs_mntopts:=gid=$gid,umask=002}
sshfs_mntopts=${sshfs_mntopts:=reconnect,compression=yes,workaround=rename,gid=$gid,umask=002}
ftpfs_mntopts=${ftpfs_mntopts:=gid=$gid,umask=002}
cifs_mntopts=${cifs_mntopts:=gid=$gid}
open_cmd=${open_cmd:=xdg-open}
if [[ -z $conkyrc ]]; then
  for i in /home/*/.conkyrc; do conkyrc=("$conkyrc" "$i"); done
fi
case $1 in
  udevmount) udevmount ;;
  udevunmount) udevunmount ;;
  tray) yadtray & ;;
  image) shift; imagemenu "$@" ;;
  sshfs) sshmenu ;;
  ftpfs) ftpmenu ;;
  samba) smbmenu ;;
  device) devicemenu ;;
  hist) histmenu ;;
  unmount) unmountmenu ;;
  editcfg) editcfg ;;
  -h|*help)
    echo $version
    echo "$0                      #show main menu"
    echo "$0 image [file_paths]   #mount image file (iso,img,etc.)"
    echo "$0 sshfs                #mount via sshfs"
    echo "$0 ftpfs                #mount via curlftpfs"
    echo "$0 samba                #mount  via samba"
    echo "$0 device               #mount devices on computer"
    echo "$0 hist                 #mount from history"
    echo "$0 unmount              #unmount menu"
    echo "$0 editcfg              #create/edit cfg"
    echo "$0 tray                 #show trayicon" ;;
  *) mainmenu ;;
esac
