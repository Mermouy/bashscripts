#!/bin/bash
: <<COMMENT
  Copyright (C) 2012 Tri Le <trile7 at gmail dot com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
COMMENT

red='\e[0;31m'; bold='\e[1m'; none='\e[0m'
log="logger -t tmpfs-sync -s"

function usage {
  echo -e "${bold}Usage: $0 [--config config_file_path] readme|start|sync|stop $none"
  exit 1
  }

if [[ $1 = --config ]]; then
  config=$2
  shift 2
elif [[ $1 = readme ]]; then
  cat "$0.readme"
  exit 0
fi
if ! source ${config:=$0.cfg}; then
  echo -e "${red}Problem sourcing config file.  Please refer to readme to create config file $none"
  usage
fi
if ! mount | grep -q "$tmpfs type tmpfs"; then
  echo -e "$red$tmpfs is not mounted as tmpfs $none"; exit 1
fi

function sync() {
  [[ `readlink "$1"` = $tmp ]] || return 2
  [[ -d $tmp ]] && rsync -a --delete "$tmp/" "$backup/" ||  rsync "$tmp" "$backup"
  if [[ $? -eq 0 ]]; then
    $log "$1 synced"
  else
    $log "$1 fails to sync"; return 1
  fi
  }

function stopsync(){
  [[ `readlink "$1"` = $tmp ]] || return 2
  rm -f "$1"
  [[ -e $backup ]] && mv "$backup" "$1"
  [[ -e $tmp ]] && rm -rf "$tmp"
  }

function startsync(){
    [[ `readlink "$1"` = $tmp ]] && return 2
    cp -a "$i" "$tmp" || return 1
    mv "$i" "$backup" || return 1
    ln -s "$tmp" "$i" || return 1
  }

action=$1
for i in "${sync_folders[@]}"; do
  backup=$i-backup
  tmp=$tmpfs/${i//\//_}
  case $action in
    start)
      startsync "$i"
      if [[ $? -eq 1 ]]; then
        $log "$i fails to start"; stopsync "$i"
      else
        $log "$i started"
      fi ;;
    stop)
      sync "$i"
      stopsync "$i"
      $log "$i stopped" ;;
    sync) sync "$i" ;;
    *) usage ;;
  esac
done
